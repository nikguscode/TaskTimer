package com.nikguscode.TaskTimer.controller.keyboardControllers;

import com.nikguscode.TaskTimer.controller.keyboardControllers.keyboardInterfaces.InlineController;
import com.nikguscode.TaskTimer.controller.keyboardControllers.keyboardInterfaces.ReplyController;
import com.nikguscode.TaskTimer.controller.keyboardControllers.keyboardInterfaces.SendMessageController;
import com.nikguscode.TaskTimer.model.dal.Add;
import com.nikguscode.TaskTimer.model.dal.GetCategory;
import com.nikguscode.TaskTimer.model.service.CategoryFilter;
import com.nikguscode.TaskTimer.model.service.TelegramData;
import com.nikguscode.TaskTimer.view.EmojiConstants;
import com.nikguscode.TaskTimer.view.keyboards.CategoryBoard;
import com.nikguscode.TaskTimer.view.keyboards.CategoryEditBoard;
import com.nikguscode.TaskTimer.view.keyboards.CategoryListBoard;
import com.nikguscode.TaskTimer.view.keyboards.MenuBoard;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;

/**
 * This class contains a keyboard controller, where the user can choose to add a category or view created
 * categories.
 */

@Controller
@Getter
@Setter
@Slf4j
public class CategoryController implements ReplyController, InlineController, SendMessageController {

    private final TelegramData telegramData;
    private final Add add;
    private final CategoryBoard categoryBoard;
    private final CategoryListBoard categoryListBoard;
    private final GetCategory getCategory;
    private final MenuBoard menuBoard;
    private CategoryFilter categoryFilter;
    private boolean addTransaction;
    private boolean listTransaction;
    private SendMessage sendMessage;
    private EditMessageText editMessageText;
    private CategoryEditBoard categoryEditBoard;

    @Autowired
    public CategoryController(TelegramData telegramData,
                              GetCategory getCategory,
                              CategoryFilter categoryFilter,
                              CategoryEditBoard categoryEditBoard,
                              Add add,
                              CategoryBoard categoryBoard,
                              CategoryListBoard categoryListBoard,
                              MenuBoard menuBoard) {
        this.telegramData = telegramData;
        this.categoryEditBoard = categoryEditBoard;
        this.getCategory = getCategory;
        this.categoryFilter = categoryFilter;
        this.add = add;
        this.categoryBoard = categoryBoard;
        this.categoryListBoard = categoryListBoard;
        this.menuBoard = menuBoard;
    }

    @Override
    public void handleCommands() {
        sendMessage = new SendMessage();
        sendMessage.setChatId(telegramData.getChatId());

        if (telegramData.getMessageText().equals(EmojiConstants.LIST_ICON + " –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")) { // icon = üìÑ
            sendMessage.setText("–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
            sendMessage.setReplyMarkup(categoryBoard.getBoard());
        }

    }

    public void sendSelectedCategory() {
        editMessageText = new EditMessageText();
        editMessageText.setChatId(telegramData.getChatId());
        editMessageText.setMessageId(telegramData.getMessageId());

        editMessageText.setText("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:");
        editMessageText.setReplyMarkup(categoryEditBoard.getBoard());
    }

    @Override
    public void handleCommands(Update update) {

        if (update.hasCallbackQuery() && update.getCallbackQuery() != null) {
            editMessageText = new EditMessageText();
            editMessageText.setChatId(telegramData.getChatId());
            editMessageText.setMessageId(telegramData.getMessageId());

            switch (update.getCallbackQuery().getData()) {
                case "add_ctg":
                    editMessageText.setText("–í–≤–µ–¥–∏—Ç–µ: \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ | –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\" —á–µ—Ä–µ–∑ \" | \" \n" +
                            "–ü—Ä–∏–º–µ—Ä: –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ | –û—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞");
                    addTransaction = true;
                    break;

                case "list_of_ctg":
                    listTransaction = true;
                    break;

                case "next_page":

                    break;

                case "previous_page":

                    break;

                case "menu_btn":
                    editMessageText.setText("–£—Å–ø–µ—à–Ω–æ");
                    sendMessage.setReplyMarkup(menuBoard.getBoard());
                    break;

                default:
                    log.warn("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ CategoryController");
                    sendMessage.setText("""
                            ‚ùå –ö–∞–∂–µ—Ç—Å—è, —É–∫–∞–∑–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\s
                            ‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "/start\"""");
                    break;
            }

        }
    }

    @Override
    public SendMessage sendMessage() {
        return sendMessage;
    }

    @Override
    public EditMessageText sendEditMessage() {
        return editMessageText;
    }

}
